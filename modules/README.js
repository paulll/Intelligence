/*
	Тут всяческие модули
	
	У модулей кабэ могут быть свои подмодули, если надо.
	Но хотя лучше мыслить иначе - 
		> эта папка - корневая директория системы (как в linux "/")
		> у нее есть подпапки, а у подпапок свои и.т.д (FS)
		> но все они одинаково принадлежат системе (ROOT),
		> т.е. у всех модулей (их можно сравнить с приложениями)
		> есть доступ ко всем папкам системы, так как 
		> тут есть только один пользователь - система (ROOT)
*/

// Для добавления модуля есть два варианта

// 1-ый: Простой, но НЕ рекомендован в будущем
// (но пока что использовать его, так как проверен)

1. Создать папку, назвать ее названием модуля (ибо API будут api.имяпапки.*)
2. Положить в нее файл index.js

// 2-ой
// (можешь проверить, я не пробовал)
1. Создать папку
2. Положить в нее файл manifest.json
3. Заполнить его по примеру
	{
		main: 'имяФайлаКоторыйБудетЗапущен.js',
		name: 'Название модуля',

		// данный параметр пока что не обрабатывается.
		required: {
			// будут установлены и слинкованы в ./node_modules; 
			// @!TODO: линковать node_modules во все подпапки со всеми уровнями вложенности или добавить в PATH
			node_modules: ['список', 'нужных', 'модулей', 'для', 'node.js'],
			// необходимые при загрузке модули самого ИИ
			// влияет на порядок загрузки
			system_modules: [],
			// ссылки на необходимые пакеты для системы
			rpms: [],
			// названия необходимых пакетов YUM
			yum_packages: [],
			// ссылки на требуемые бинарники 
			// будут установлены в ./bin
			binaries: []
		}
	}


// Теперь для обоих случаев в созданный .js файл
// нужно заполнить по примеру

. код, выполняемый 
. при начальной загрузке
. (api недоступны)

module.exports = function () {
	. код, выполняемый
	. при загрузке.
	. api доступны, но могут быть не все. 
	. система будет пытаться найти зависимости в API
	. по указанным в манифесте API
	. и на основе этого составлять список загрузки.
	.
	. this = api.имямодуля;
}

//
// Глобальные переменные
//

// Выбрасывать ошибку при малейшей неполадке
// Если false, тогда выдавать [WARN]
var DEBUG;

// Объект, в который записываются все модули
// Каждый модуль доступен как api.имямодуля
var api;

// Функция, начинающая новый поток (т.е. похоже на setTimeout(fx, 0); )
// но в этом потоке можно синхронно вызывать
// ассинхронные функции.
// @see http://habr.ru/post/116124
var Sync;


// Существующие API

// DataBase API
> api.db.phrases,			// враппер коллекции mongodb с фразами. (словарь фраз с одинаковым значением)
  api.db.questions			// враппер коллекции mongodb с вопросами
	.get(query)				// получить значение из коллекции
	.set(query,data)		// заменить значение в коллекции
	.raw;					// сама коллекция, если угодно юзать mongodb'вские API
> api.db._server;			// сервер mongodb

// Text API
> api.text.parse(text);		// обработать текст. Возвращает ответный текст
> api.text.getPhrase(id);	// получить текст фразы по ее номеру
> api.text.simplify(text);  // упростить текст для сравнения

// I/O API
> api.io.send(message);		// отправить сообщение. (см ./io/README.js)


// API todo:
//
// Resource APIs
//
// Wikidata, DBPedia, ...;
// Vk, Fb, Tw, ...;
// Soundcloud, Musixmatch, ProstoPleer, Lyrics, ...;
// Google, DuckDuckGo;
// Toster, Askubuntu, fedoraquestions, Stackowerflow, ...;
// Google Translate, PROMPT;
// Wikipedia, Lurkmore, ...;
//